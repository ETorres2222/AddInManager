<Window
    x:Class="RevitElementBipChecker.View.FrmCompareBip"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:viewmodel="clr-namespace:RevitElementBipChecker.Viewmodel"
    Title="Mini Compare Two Element"
    Width="650"
    MinWidth="450"
    MinHeight="200"
    Height="600"
    d:DataContext="{d:DesignInstance viewmodel:CompareBipViewModel}"
    FocusManager.FocusedElement="{Binding ElementName=tbxSearch}"
    mc:Ignorable="d">
    <Window.Resources>
        <Style x:Key="RoundedButton" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                            Margin="2,2,2,2"
                            Background="{TemplateBinding Background}"
                            CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--  Style for the MouseOver state  -->
        <Style
            x:Key="RoundedButtonMouseOver"
            BasedOn="{StaticResource RoundedButton}"
            TargetType="Button">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="LightBlue" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--  Style for the Pressed state  -->
        <Style
            x:Key="RoundedButtonPressed"
            BasedOn="{StaticResource RoundedButtonMouseOver}"
            TargetType="Button">
            <Style.Triggers>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="LightCoral" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30" />
            <RowDefinition Height="*" />
            <RowDefinition Height="20" />
            <RowDefinition Height="30" />
        </Grid.RowDefinitions>
        <TextBox
            x:Name="tbxSearch"
            Grid.Row="0"
            Grid.Column="0"
            Margin="2,2,2,2"
            Text="{Binding SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <TextBox.Resources>
                <VisualBrush
                    x:Key="tbxText"
                    AlignmentX="Left"
                    AlignmentY="Center"
                    Stretch="None"
                    TileMode="None">
                    <VisualBrush.Visual>
                        <Grid Background="Transparent">
                            <TextBlock
                                Margin="5,0"
                                Foreground="DimGray"
                                Text="Search Filter By Parameter Name" />
                        </Grid>
                    </VisualBrush.Visual>
                </VisualBrush>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="3" />
                </Style>
            </TextBox.Resources>
            <TextBox.Style>
                <Style TargetType="TextBox">
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="BorderBrush" Value="#FFAFAFAF" />
                    <Setter Property="BorderThickness" Value="0.5" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Margin" Value="5,5,0,5" />
                    <Style.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Background" Value="{StaticResource tbxText}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TextBox.Style>
        </TextBox>
        <DataGrid
            x:Name="dataGrid"
            Grid.Row="1"
            Margin="2,2,2,2"
            AlternationCount="2"
            AutoGenerateColumns="False"
            Background="WhiteSmoke"
            BorderThickness="0"
            IsReadOnly="True"
            ItemsSource="{Binding Differences}">
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Setter Property="Background" Value="{Binding RowColor}" />
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Columns>
                <DataGridTextColumn
                    Width="100"
                    Binding="{Binding Name}"
                    Header="Parameter Name" />
                <DataGridTextColumn
                    Width="90"
                    Binding="{Binding GroupName}"
                    Header="GroupName" />
                <DataGridTextColumn
                    Width="60"
                    Binding="{Binding TypeOrInstance}"
                    Header="TypeOrInstance" />
                <!-- <DataGridTextColumn Binding="{Binding BuiltInParameter}" Header="BuiltInParameter" /> -->
                <DataGridTextColumn
                    Width="70"
                    Binding="{Binding Type}"
                    Header="Type" />
                <!-- <DataGridTextColumn Binding="{Binding Unit}" Header="Unit" /> -->
                <!-- <DataGridTextColumn Binding="{Binding ReadWrite}" Header="ReadWrite" /> -->
                <!-- <DataGridTextColumn Binding="{Binding Shared}" Header="Shared" /> -->
                <DataGridTextColumn
                    Width="*"
                    Binding="{Binding Value1}"
                    Header="Value Element1" />
                <DataGridTextColumn
                    Width="*"
                    Binding="{Binding Value2}"
                    Header="Value Element2" />
                <DataGridTextColumn
                    Width="*"
                    Binding="{Binding Similarity}"
                    Header="Similarity" />
            </DataGrid.Columns>
            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{Binding SelectElement1Command}" Header="Select Element1" />
                    <MenuItem Command="{Binding SelectElement2Command}" Header="Select Element2" />
                    <MenuItem Command="{Binding SnoopCommand}" Header="Snoop Elements" />
                </ContextMenu>
            </DataGrid.ContextMenu>
        </DataGrid>
        <StackPanel
            Grid.Row="2"
            Margin="2,0,2,0"
            Orientation="Horizontal">
            <Button
                Width="20"
                Height="20"
                Background="Transparent"
                BorderThickness="0"
                Command="{Binding HelpCommand}"
                Style="{x:Null}"
                ToolTip="You need help ?">
                <Button.Content>
                    <Image Source="../Resources/lightbulb_702797.png" Stretch="Uniform" />
                </Button.Content>
            </Button>
            <Button
                Width="80"
                Height="Auto"
                Margin="2,0,2,0"
                Background="Yellow"
                Style="{StaticResource RoundedButton}">
                <Button.ToolTip>
                    <ToolTip
                        Width="400"
                        Height="30"
                        AllowDrop="True"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        Content="Parameter Difference between Element1 and Element2"
                        FontWeight="Bold"
                        HasDropShadow="True"
                        Placement="Top"
                        StaysOpen="True" />
                </Button.ToolTip>
            </Button>
            <Button
                Width="80"
                Height="Auto"
                Margin="0,0,2,0"
                Background="Firebrick "
                Style="{StaticResource RoundedButton}">
                <Button.ToolTip>
                    <ToolTip
                        Width="300"
                        Height="30"
                        AllowDrop="True"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        Content="Parameter Not Exist In Element 1"
                        FontWeight="Bold"
                        Placement="Top"
                        StaysOpen="True" />
                </Button.ToolTip>
            </Button>
            <Button
                Width="80"
                Height="Auto"
                Margin="0,0,2,0"
                Background="SeaGreen"
                Style="{StaticResource RoundedButton}">
                <Button.ToolTip>
                    <ToolTip
                        Width="300"
                        Height="30"
                        AllowDrop="True"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        Content="Parameter Not Exist In Element 2"
                        FontWeight="Bold"
                        Placement="Top"
                        StaysOpen="True" />
                </Button.ToolTip>
            </Button>
            <Button
                Width="80"
                Height="Auto"
                Margin="0,0,2,0"
                Background="Gray"
                Style="{StaticResource RoundedButton}">
                <Button.ToolTip>
                    <ToolTip
                        Width="300"
                        Height="30"
                        AllowDrop="True"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        Content="Parameter Is Same In Both Element"
                        FontWeight="Bold"
                        Placement="Top"
                        StaysOpen="True" />
                </Button.ToolTip>
            </Button>
            
        </StackPanel>
        <Grid Grid.Row="3" Margin="2,2,2,2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="80" />
                <ColumnDefinition />
                <ColumnDefinition Width="80" />
            </Grid.ColumnDefinitions>
            <Button
                Margin="1,1,1,1"
                BorderThickness="0.5"
                Background="WhiteSmoke"
                Command="{Binding ToggleCommand}"
                Content="Toggle"
                ToolTip="Toggle to check different parameters between two elements invert">
                <Button.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="3"/>
                    </Style>
                </Button.Resources>
            </Button>
            <Button
                Grid.Row="0"
                Grid.Column="1"
                Margin="1,1,1,1"
                BorderThickness="0.5"
                Background="WhiteSmoke"
                Command="{Binding CloseCommand}"
                Content="Close"
                IsCancel="True">
                <Button.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="3"/>
                    </Style>
                </Button.Resources>
            </Button>
            <Button
                Grid.Column="2"
                Margin="1,1,1,1"
                BorderThickness="0.5"
                Background="WhiteSmoke"
                Command="{Binding ExportCommand}"
                Content="Export">
                <Button.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="3"/>
                    </Style>
                </Button.Resources>
            </Button>
        </Grid>

    </Grid>
</Window>